{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#overview","title":"Overview","text":"<p>STAC is a json-based metadata standard for describing spatial-temporal assets, particularly satellite and Earth observation data. STAC allows users to quickly search, discover and use geospatial assets by providing a consistent structure for query and storage.</p> <p>The stac_generator can be used as a cross-platform command line interface (CLI) program or a python library that combines automatically extracted geospatial information from raw assets and other user-provided metadata to build a STAC-compliant metadata record for further use. Generated STAC records can be saved locally or behind a STAC API-compliant server.</p> <p>The stac_generator was developed as part of the Multiscalar Crop Characterisation Project (MCCN). Using the STAC generator to describe an asset collection is the first step in building a datacube with the MCCN engine.</p>"},{"location":"#installation","title":"Installation","text":"<p>Requirements: python3.11-3.12</p> <p>STAC Generator can be installed directly from Pypi:</p> <pre><code>pip install pystac-generator\n</code></pre> <p>Note that if you want STAC Generator to be accessible from everywhere (outside the environment where it is installed), you can install STAC Generator with pipx instead of pip. To install pipx, visit this.</p> <pre><code>pipx install pystac-generator\n</code></pre>"},{"location":"#upgrade","title":"Upgrade","text":"<p>Using pip:</p> <pre><code>pip install pystac-generator --upgrade\n</code></pre> <p>Using pipx:</p> <pre><code>pipx upgrade pystac-generator\n</code></pre>"},{"location":"advanced_quick_start/","title":"Advanced quick start","text":""},{"location":"advanced_quick_start/#using-stac_generator-as-a-python-module","title":"Using <code>stac_generator</code> as a python module","text":"<p>In the previous tutorial, we have seen how <code>stac_generator</code> can be used as a command line tool to generate STAC metadata. In this section, we will demonstrate how to write a Python script that imports the <code>stac_generator</code> modules and perform tasks in the previous section:</p> PYTHON generate_collection.py<pre><code>import datetime\n\nfrom stac_generator.core.base import (\n    StacCollectionConfig,\n    StacSerialiser,\n)\nfrom stac_generator.core.raster import RasterConfig\nfrom stac_generator.factory import StacGeneratorFactory\n\n# CSV Config - Instantiate the config using a dictionary\npoint_config = {\n    \"id\": \"soil_data\",\n    \"location\": \"soil.csv\",\n    \"collection_date\": \"2020-01-01\",\n    \"collection_time\": \"10:00:00\",\n    \"X\": \"eastings_utm\",\n    \"Y\": \"northings_utm\",\n    \"epsg\": 28355,\n    \"column_info\": [\n        {\"name\": \"ca_soln\", \"description\": \"Calcium solution in ppm\"},\n        {\"name\": \"profile\", \"description\": \"Field profile\"},\n    ],\n}\n\n\n# Raster Config - Instantiate using a known config class\nraster_config = RasterConfig(\n    id=\"l2a_pvi\",\n    location=\"L2A_PVI.tif\",\n    collection_date=datetime.date(year=2020, month=1, day=1),\n    collection_time=datetime.time(hour=0, minute=0, second=0),\n    band_info=[\n        {\n            \"name\": \"B04\",\n            \"common_name\": \"red\",\n            \"description\": \"Common name: red, Range: 0.6 to 0.7\",\n            \"wavelength\": 0.6645,\n        },\n        {\n            \"name\": \"B03\",\n            \"common_name\": \"green\",\n            \"description\": \"Common name: green, Range: 0.5 to 0.6\",\n            \"wavelength\": 0.56,\n        },\n        {\n            \"name\": \"B02\",\n            \"common_name\": \"blue\",\n            \"description\": \"Common name: blue, Range: 0.45 to 0.5\",\n            \"wavelength\": 0.4966,\n        },\n    ],\n)\n\n# Vector Config - Instantiate using a file - provides a file path\nvector_config = \"vector_detailed_config.json\"\n\n# Collection Config\ncollection_config = StacCollectionConfig(\n    id=\"collection\",\n    title=\"tutorial collection\",\n    description=\"collection generated using apis instead of CLI\",\n    license=\"MIT\",\n)\n\n# Create generator\ngenerator = StacGeneratorFactory.get_collection_generator(\n    source_configs=[raster_config, vector_config, point_config],\n    collection_config=collection_config,\n)\n# Serialise collection\nserialiser = StacSerialiser(generator, \"generated\")\nserialiser()\n</code></pre> <p>The steps include:</p> <ul> <li>Declaring item configs</li> <li>Declaring collection config</li> <li>Creating a generator object by passing the item configs and collection configs to <code>StacGeneratorFactor.get_collection_generator</code>.</li> <li>Creating the serialiser object with <code>StacSerialiser</code> and call the object.</li> </ul>"},{"location":"advanced_quick_start/#declaring-item-configs","title":"Declaring item configs","text":"<p>The first step is to prepare the config. In general, there are three ways to declare a config:</p> <ul> <li>Using a config file.</li> <li>Using a regular python dictionary.</li> <li>Using a known config class.</li> </ul> <p>To declare the config from a file, you will need to provide the path to the config file that can be accessed in the current path. For instance, in the previous example, we use vector_detailed_config.json as the vector config.</p> <p>To declare the config using a dictionary, you will need to write a python dictionary with the necessary fields declared. Note how the python dictionary in the previous example has the exact same content as the config in the previous tutorial.</p> <p>Using a known config class in the recommended approach. If you already know the data type of the asset, you can use one of <code>VectorConfig</code>, <code>RasterConfig</code>, <code>PointConfig</code> to declare the config. If you have a linter available, the linter can help pre-validate your input or suggest missing required fields when using the config classes.</p>"},{"location":"advanced_quick_start/#saving-configs-to-file","title":"Saving configs to file","text":"<p>This section describes how you can save the configs declared programmatically to a json file. We provide two convenient methods for serialising configs:</p> <ul> <li>If you want to generate a composite config for the entire collection, use <code>StacSerialiser</code>'s <code>save_collection_config</code> method.</li> <li>If you want to save individual config to a file, use <code>StacSerialiser</code>'s <code>save_configs</code> static method.</li> </ul> <p>For instance, if we want to create a composite config for the previous example:</p> <pre><code># Declare item and collection configs\n# Create generator\ngenerator = StacGeneratorFactory.get_collection_generator(\n    source_configs=[raster_config, vector_config, point_config],\n    collection_config=collection_config,\n)\n# Serialise collection\nserialiser = StacSerialiser(generator, \"generated\")\n# serialiser()\nserialiser.save_collection_config(\"composite_config.json\")\n</code></pre> <p>The full script is provided as follows:</p> PYTHON <pre><code>import datetime\n\nfrom stac_generator.core.base import (\n    StacCollectionConfig,\n    StacSerialiser,\n)\nfrom stac_generator.core.raster import RasterConfig\nfrom stac_generator.factory import StacGeneratorFactory\n\n# CSV Config - Instantiate the config using a dictionary\npoint_config = {\n    \"id\": \"soil_data\",\n    \"location\": \"soil.csv\",\n    \"collection_date\": \"2020-01-01\",\n    \"collection_time\": \"10:00:00\",\n    \"X\": \"eastings_utm\",\n    \"Y\": \"northings_utm\",\n    \"epsg\": 28355,\n    \"column_info\": [\n        {\"name\": \"ca_soln\", \"description\": \"Calcium solution in ppm\"},\n        {\"name\": \"profile\", \"description\": \"Field profile\"},\n    ],\n}\n\n\n# Raster Config - Instantiate using a known config class\nraster_config = RasterConfig(\n    id=\"l2a_pvi\",\n    location=\"L2A_PVI.tif\",\n    collection_date=datetime.date(year=2020, month=1, day=1),\n    collection_time=datetime.time(hour=0, minute=0, second=0),\n    band_info=[\n        {\n            \"name\": \"B04\",\n            \"common_name\": \"red\",\n            \"description\": \"Common name: red, Range: 0.6 to 0.7\",\n            \"wavelength\": 0.6645,\n        },\n        {\n            \"name\": \"B03\",\n            \"common_name\": \"green\",\n            \"description\": \"Common name: green, Range: 0.5 to 0.6\",\n            \"wavelength\": 0.56,\n        },\n        {\n            \"name\": \"B02\",\n            \"common_name\": \"blue\",\n            \"description\": \"Common name: blue, Range: 0.45 to 0.5\",\n            \"wavelength\": 0.4966,\n        },\n    ],\n)\n\n# Vector Config - Instantiate using a file - provides a file path\nvector_config = \"vector_detailed_config.json\"\n\n# Collection Config\ncollection_config = StacCollectionConfig(\n    id=\"collection\",\n    title=\"tutorial collection\",\n    description=\"collection generated using apis instead of CLI\",\n    license=\"MIT\",\n)\n\n# Create generator\ngenerator = StacGeneratorFactory.get_collection_generator(\n    source_configs=[raster_config, vector_config, point_config],\n    collection_config=collection_config,\n)\n# Serialise collection\nserialiser = StacSerialiser(generator, \"generated\")\nserialiser.save_collection_config(\"composite_config.json\")\n</code></pre> <p>Alternatively, if we want to save raster and point configs to <code>raster_point_config.json</code>, we can do the following:</p> <pre><code># Declare item configs\n\n# serialiser()\nStacSerialiser.save_config([raster_config, point_config],\"raster_point_config.json\")\n</code></pre> <p>The full script is provided as follows:</p> PYTHON <pre><code>import datetime\n\nfrom stac_generator.core.base import (\n    StacCollectionConfig,\n    StacSerialiser,\n)\nfrom stac_generator.core.raster import RasterConfig\nfrom stac_generator.factory import StacGeneratorFactory\n\n# CSV Config - Instantiate the config using a dictionary\npoint_config = {\n    \"id\": \"soil_data\",\n    \"location\": \"soil.csv\",\n    \"collection_date\": \"2020-01-01\",\n    \"collection_time\": \"10:00:00\",\n    \"X\": \"eastings_utm\",\n    \"Y\": \"northings_utm\",\n    \"epsg\": 28355,\n    \"column_info\": [\n        {\"name\": \"ca_soln\", \"description\": \"Calcium solution in ppm\"},\n        {\"name\": \"profile\", \"description\": \"Field profile\"},\n    ],\n}\n\n\n# Raster Config - Instantiate using a known config class\nraster_config = RasterConfig(\n    id=\"l2a_pvi\",\n    location=\"L2A_PVI.tif\",\n    collection_date=datetime.date(year=2020, month=1, day=1),\n    collection_time=datetime.time(hour=0, minute=0, second=0),\n    band_info=[\n        {\n            \"name\": \"B04\",\n            \"common_name\": \"red\",\n            \"description\": \"Common name: red, Range: 0.6 to 0.7\",\n            \"wavelength\": 0.6645,\n        },\n        {\n            \"name\": \"B03\",\n            \"common_name\": \"green\",\n            \"description\": \"Common name: green, Range: 0.5 to 0.6\",\n            \"wavelength\": 0.56,\n        },\n        {\n            \"name\": \"B02\",\n            \"common_name\": \"blue\",\n            \"description\": \"Common name: blue, Range: 0.45 to 0.5\",\n            \"wavelength\": 0.4966,\n        },\n    ],\n)\n\n# Vector Config - Instantiate using a file - provides a file path\nvector_config = \"vector_detailed_config.json\"\n\n# Serialise individual configs\nStacSerialiser.save_config([raster_config, point_config],\"raster_point_config.json\")\n</code></pre>"},{"location":"composite/","title":"Composite","text":"<p>In many cases, it is common to have a collection with multiple items of different data types. There are two ways to serialise multiple items at once into a collection, either using an aggregated config file, or using multiple config files.</p> <p>In this tutorial, we will be describing the asset Werribee.geojson, vegetation_cover.tif, and soil_data.csv from the previous tutorials.</p> <p>Note that regardless of which method is used, each config entry must be a valid config, and the id for each config entry must be unique. The program will raise an error if either of those conditions are not fulfilled.</p>"},{"location":"composite/#multiple-config-files","title":"Multiple config files","text":"<p>Prepare the configs as described in the previous tutorials:</p> <ul> <li>vector_simple_config.json</li> <li>raster_custom_config.json</li> <li>point_simple_config.json</li> </ul> <p>Then run the following command:</p> <pre><code>stac_generator serialise \\\n  vector_simple_config.json\\\n  raster_custom_config.json\\\n  point_simple_config.json\n</code></pre> <p>To serialise items from multiple configs, we simply add the configs as positional parameters in the command line application.</p>"},{"location":"composite/#an-aggregated-config","title":"An aggregated config","text":"<p>To prepare an aggregated config, we simply add config item entries as a list to the config file:</p> jsonyaml composite_config.json<pre><code>[\n  {\n    \"id\": \"Werribee\",\n    \"location\": \"Werribee.geojson\",\n    \"collection_date\": \"2025-01-01\",\n    \"collection_time\": \"00:00:00\"\n  },\n  {\n    \"id\": \"vegetation_cover\",\n    \"location\": \"vegetation_cover.tif\",\n    \"collection_date\": \"2021-02-21\",\n    \"collection_time\": \"10:00:17\",\n    \"band_info\": [\n      {\n        \"name\": \"vegetation\",\n        \"description\": \"Vegetation cover level\"\n      }\n    ]\n  },\n  {\n    \"id\": \"soil_data\",\n    \"location\": \"soil_data.csv\",\n    \"collection_date\": \"2020-01-01\",\n    \"collection_time\": \"10:00:00\",\n    \"X\": \"Longitude\",\n    \"Y\": \"Latitude\",\n    \"epsg\": 4326,\n    \"column_info\": [\n      {\n        \"name\": \"Ca_Soln\",\n        \"description\": \"Calcium solution in ppm\"\n      },\n    ]\n  }\n]\n</code></pre> composite_config.yaml<pre><code>- id: \"Werribee\"\n  location: \"Werribee.geojson\"\n  collection_date: \"2025-01-01\"\n  collection_time: \"00:00:00\"\n- id: vegetation_cover\n  location: vegetation_cover.tif\n  collection_date: '2021-02-21'\n  collection_time: '10:00:17'\n  band_info:\n  - description: Vegetation cover level\n    name: vegetation\n- id: soil_data\n  location: soil_data.csv\n  epsg: 4326\n  X: Longitude\n  Y: Latitude\n  collection_date: '2020-01-01'\n  collection_time: '10:00:00'\n  column_info:\n  - description: Calcium solution in ppm\n    name: Ca_Soln\n</code></pre> <p>The collection can then be generated by running the command:</p> <pre><code>stac_generator serialise composite.json\n</code></pre>"},{"location":"introduction/","title":"Introduction","text":""},{"location":"introduction/#terminologies","title":"Terminologies","text":"<p><code>stac_generator</code> generates a STAC collection from information that can be extracted from the spatio-temporal asset and from data provided by users.</p> <p></p> <p>A STAC item is a core component of the STAC specification, designed to describe a single geospatial asset or dataset. The key attributes of a STAC item includes: - <code>id</code>: identifier - <code>datetime</code>: the timestamp when the item is collected - <code>asset</code>: information about the asset, primarily its location <code>href</code>. - <code>geometry</code>: item geometry type and coordinates - <code>bbox</code>: item bounding box</p> Example STAC Item <pre><code>{\n  \"type\": \"Feature\",\n  \"stac_version\": \"1.0.0\",\n  \"stac_extensions\": [\n    \"https://stac-extensions.github.io/projection/v1.1.0/schema.json\",\n    \"https://stac-extensions.github.io/eo/v1.1.0/schema.json\",\n    \"https://stac-extensions.github.io/raster/v1.1.0/schema.json\"\n  ],\n  \"id\": \"L2A_PVI\",\n  \"geometry\": {\n    \"type\": \"Polygon\",\n    \"coordinates\": [\n      [\n        [\n          15.110630736098942,\n          36.95292538275869\n        ],\n        [\n          15.110630736098942,\n          37.947537561322136\n        ],\n        [\n          13.876365195204773,\n          37.947537561322136\n        ],\n        [\n          13.876365195204773,\n          36.95292538275869\n        ],\n        [\n          15.110630736098942,\n          36.95292538275869\n        ]\n      ]\n    ]\n  },\n  \"bbox\": [\n    13.876365195204773,\n    36.95292538275869,\n    15.110630736098942,\n    37.947537561322136\n  ],\n  \"properties\": {\n    \"proj:code\": \"EPSG:32633\",\n    \"proj:shape\": [\n      343,\n      343\n    ],\n    \"proj:transform\": [\n      320.0,\n      0.0,\n      399960.0,\n      0.0,\n      -320.0,\n      4200000.0,\n      0.0,\n      0.0,\n      1.0\n    ],\n    \"eo:bands\": [\n      {\n        \"name\": \"b04\",\n        \"common_name\": \"red\",\n        \"description\": \"Common name: red\",\n        \"center_wavelength\": 0.6645\n      },\n      {\n        \"name\": \"b03\",\n        \"common_name\": \"green\",\n        \"description\": \"Common name: green\",\n        \"center_wavelength\": 0.56\n      },\n      {\n        \"name\": \"b02\",\n        \"common_name\": \"blue\",\n        \"description\": \"Common name: blue\",\n        \"center_wavelength\": 0.4966\n      }\n    ],\n    \"eo:cloud_cover\": 0.0,\n    \"eo:snow_cover\": 0.0,\n    \"datetime\": \"2021-02-21T09:10:17Z\",\n    \"start_datetime\": \"2021-02-21T09:10:17Z\",\n    \"end_datetime\": \"2021-02-21T09:10:17Z\"\n  },\n  \"links\": [\n    {\n      \"rel\": \"root\",\n      \"href\": \"http://example.com/collection.json\",\n      \"type\": \"application/json\",\n      \"title\": \"Auto-generated.\"\n    },\n    {\n      \"rel\": \"collection\",\n      \"href\": \"http://example.com/collection.json\",\n      \"type\": \"application/json\",\n      \"title\": \"Auto-generated.\"\n    },\n    {\n      \"rel\": \"self\",\n      \"href\": \"http://example.com/L2A_PVI/L2A_PVI.json\",\n      \"type\": \"application/json\"\n    },\n    {\n      \"rel\": \"parent\",\n      \"href\": \"http://example.com/collection.json\",\n      \"type\": \"application/json\",\n      \"title\": \"Auto-generated.\"\n    }\n  ],\n  \"assets\": {\n    \"data\": {\n      \"href\": \"tests/files/integration_tests/raster/data/L2A_PVI.tif\",\n      \"type\": \"image/tiff; application=geotiff\",\n      \"title\": \"Raster Data\",\n      \"raster:bands\": [\n        {\n          \"nodata\": 0,\n          \"data_type\": \"uint16\"\n        },\n        {\n          \"nodata\": 0,\n          \"data_type\": \"uint16\"\n        },\n        {\n          \"nodata\": 0,\n          \"data_type\": \"uint16\"\n        }\n      ],\n      \"eo:bands\": [\n        {\n          \"name\": \"b04\",\n          \"common_name\": \"red\",\n          \"description\": \"Common name: red\",\n          \"center_wavelength\": 0.6645\n        },\n        {\n          \"name\": \"b03\",\n          \"common_name\": \"green\",\n          \"description\": \"Common name: green\",\n          \"center_wavelength\": 0.56\n        },\n        {\n          \"name\": \"b02\",\n          \"common_name\": \"blue\",\n          \"description\": \"Common name: blue\",\n          \"center_wavelength\": 0.4966\n        }\n      ],\n      \"roles\": [\n        \"data\"\n      ]\n    }\n  },\n  \"collection\": \"raster_data\"\n}\n</code></pre> <p>Collection is a set of STAC Item. It is used to group related STAC Items that share common properties, metadata, or themes. A collection provides a higher-level metadata description for a dataset or group of assets: - <code>id</code>: collection id - <code>spatial_extent</code>: areal coverage - <code>temporal_extent</code>: temporal coverage - <code>links</code>: associated child items and assets</p> Example Collection JSON <pre><code>{\n  \"type\": \"Collection\",\n  \"id\": \"raster_data\",\n  \"stac_version\": \"1.0.0\",\n  \"description\": \"Auto-generated\",\n  \"links\": [\n    {\n      \"rel\": \"root\",\n      \"href\": \"http://example.com/collection.json\",\n      \"type\": \"application/json\",\n      \"title\": \"Auto-generated.\"\n    },\n    {\n      \"rel\": \"item\",\n      \"href\": \"http://example.com/L2A_PVI/L2A_PVI.json\",\n      \"type\": \"application/json\"\n    },\n    {\n      \"rel\": \"self\",\n      \"href\": \"http://example.com/collection.json\",\n      \"type\": \"application/json\"\n    }\n  ],\n  \"title\": \"Auto-generated.\",\n  \"extent\": {\n    \"spatial\": {\n      \"bbox\": [\n        [\n          13.876365195204773,\n          36.95292538275869,\n          15.110630736098942,\n          37.947537561322136\n        ]\n      ]\n    },\n    \"temporal\": {\n      \"interval\": [\n        [\n          \"2021-02-21T09:10:17Z\",\n          \"2021-02-21T09:10:17Z\"\n        ]\n      ]\n    }\n  },\n  \"license\": \"proprietary\"\n}\n</code></pre> <p>To run the <code>stac_generator</code>, a config file must be provided. In essence, the config file contains the asset locations and additional user-supplied metadata, from which the STAC Item is generated. Refer to quick start to see how to build a simple config, or refer to the specication to see what fields are supported in the config.</p>"},{"location":"introduction/#data-types","title":"Data Types","text":"<p><code>stac_generator</code> classifies assets into <code>raster</code>, <code>vector</code>, and <code>point</code> data, using terminologies consistent with common GIS softwares. In general:</p> <ul> <li>Point data contains one or more entries where each entry has the <code>X</code> and <code>Y</code> fields describing the location. Each entry usually contains other fields describing the attributes at the point location. For instance, this can be soil sample measurements or raw instrument readings at a particular coordinate. Point data can also have a field representing depth/elevation or time.</li> <li>Vector data contains a collection of points whose relationship is determined by the vector type - (point, multipoint, line, multiline, polygon, multipolygon, etc). Vector data are usually shape files describing a plot or a field boundary, but can also contain plot level attributes - i.e. mean elevation, mean temperature, cumulative rainfall, etc.</li> <li>Raster data contains several 2D layers (called bands) where each band represents the attribute value at each (x, y) coordinate in the 2D grid. For instance, an orthomosaic contains RGB bands, where each band is a 2D matrix with value between 0 and 255.</li> </ul>"},{"location":"introduction/#supported-formats-for-data-assets","title":"Supported Formats for data assets","text":"<ul> <li>Raster:<ul> <li>tif</li> <li>geotif</li> </ul> </li> <li>Vector:<ul> <li>shp</li> <li>geojson</li> <li>zip+shp</li> <li>geopkg</li> </ul> </li> <li>Point:<ul> <li>csv</li> <li>txt</li> </ul> </li> </ul> <p>Note that in some cases, plot or field level attributes are recorded in a csv that does not contain X and Y columns but a plot or field ID column referencing the same attribute in a separate vector file. This additional information can be provided using the <code>join_</code> keywords in the vector config. Please see the documentation for more information.</p>"},{"location":"introduction/#collection-metadata","title":"Collection metadata","text":"<p>Aside from <code>datetime</code>, <code>start_datetime</code>, <code>end_datetime</code>, collection metadata contains fields described in STAC Common Metadata. In general, the most important fields are <code>id</code> (required), <code>keywords</code> (optional - can be useful for catalog filtering feature in the future), <code>license</code> (optional - licensing information).</p> <p>For a more detailed list of all fields, their data types, and default values, please refer to <code>STACCollectionConfig</code> under this link.</p>"},{"location":"introduction/#item-metadata","title":"Item metadata","text":"<p>Item metadata contains all fields in collection metadata and additional required <code>collection_date</code> and <code>collection_time</code> fields describing when the item was collected. Item metadata must also specify the <code>location</code> field, that points to where the data asset is stored.</p> <p>For a more detailed list of all fields, their data types, and default values, please refer to <code>STACItemConfig</code> and <code>SourceConfig</code> under this link.</p>"},{"location":"introduction/#point-metadata","title":"Point metadata","text":"<p>Point metadata contains all fields in item metadata (inherits from <code>SourceConfig</code>) and contains additional fields specifying how to process the given csv/txt file. This includes the <code>X</code> and <code>Y</code> fields specifying the columns to be treated as the X and Y coordinates, the <code>epsg</code> code specifying the CRS of the XY coordinates, and if the csv contains columns to be treated as depth/elevation or time, the optional <code>Z</code>, <code>T</code> and <code>time_format</code> fields.</p> <p>Users should also specify useful columns under <code>column_info</code> (please see <code>ColumnInfo</code> and <code>HasColumnInfo</code> under this link). For a more detailed list of all fields, their data types, and default values, please refer to <code>PointConfig</code> under this link.</p>"},{"location":"introduction/#vector-metadata","title":"Vector metadata","text":"<p>Vector metadata contains all fields in item metadata (inherits from <code>SourceConfig</code>). Since vector data is often self-described, vector metadata only requires the <code>epsg</code> code for sanity checking - i.e. to ensure that users know whether they are providing the right asset. If the vector data is a compressed zip file with multiple shp files, a <code>layer</code> field is needed to specify which <code>shp</code> file in the zip package the metadata is describing. If the vector data contains plot or field level attributes, the <code>column_info</code> should also be used.</p> <p>Users should also specify useful columns under <code>column_info</code> (please see <code>ColumnInfo</code> and <code>HasColumnInfo</code> under this link). For a more detailed list of all fields, their data types, and default values, please refer to <code>VectorConfig</code> under this link.</p> <p>A common practice in spatial application involves storing geometry information in one table and attributes in another, and a join operation is performed at run time to generate the combined data. To simplify the workflow, we assume the geometry information is stored in a vector file and the attributes stored in a csv. We can specify <code>join_file</code> to be the path to the attribute csv file. <code>join_field</code> to be a column in <code>join_file</code> and <code>join_attribute_vector</code> to be an attribute in the vector file. The two files will be joined at each record where <code>join_file</code> = <code>join_attribute_vector</code>. <code>join_column_info</code> must also be provided to describe the columns in the <code>join_file</code>.</p>"},{"location":"introduction/#raster-metadata","title":"Raster metadata","text":"<p>Raster metadata contains all fields in item metadata (inherits from <code>SourceConfig</code>). <code>band_info</code> is the only required field in a raster config.</p> <p>For a more detailed list of all fields, their data types, and default values, please refer to <code>RasterConfig</code> under this link.</p>"},{"location":"misc/","title":"Misc","text":""},{"location":"misc/#timezone","title":"Timezone","text":"<p>If the <code>timezone</code> field is not provided as part of the config, the program will use the default value <code>local</code>. Valid options for <code>timezone</code> are:</p> <ul> <li><code>local</code>: local tz determined from asset's geometry.</li> <li><code>utc</code>: utc</li> <li>timezone information compatible with <code>pytz.all_timezones</code>.</li> </ul> <p>This affects datetime information associated with the project, including:</p> <ul> <li><code>item.datetime</code> from <code>collection_date</code> and <code>collection_time</code>.</li> <li>Date information from date columns in the asset.</li> </ul> <p>Please refer to this documentation on how time data is processed.</p>"},{"location":"misc/#collection-metadata","title":"Collection Metadata","text":"<p>Collection metadata can be provided for serialisation as part of the command line. The supported metadata for collection includes:</p> <ul> <li><code>id</code>: collection's id</li> <li><code>title</code>: collection's title</li> <li><code>description</code>: collection's description</li> <li><code>license</code>: collection's license</li> </ul> <p>For instance, to serialise items described in a file <code>config.json</code> with additional id, title, description and license information, we can run the following command:</p> <pre><code>stac_generator serialise config.json\\\n    --id CollectionID \\\n    --title CollectionTitle \\\n    --description CollectionDescription \\\n    --license MIT\\\n</code></pre>"},{"location":"misc/#serialisation-destination","title":"Serialisation Destination","text":"<p>Serialisation option is provided in the command line through the flag <code>--dst</code>, specifying the location where the serialised STAC metadata will be stored. The default value for dst is <code>generated</code>, which creates the folder <code>generated</code> in the current directory. Users can provide either a local location to dst, or a STAC API compliant url, in which case the metadata will be stored behind an api server. Assuming there exists a STAC API server whose endpoint is <code>http:102.9.0.32:8082</code>. To serialise a collection described in <code>config.json</code> to this destination, we can run:</p> <pre><code>stac_generator serialise config.json\n</code></pre>"},{"location":"module/","title":"Module","text":"<p>In the previous tutorials, we have seen how the STAC Generator can be used as a command line tool to generate STAC metadata. In this section, we will demonstrate how to write a Python script that imports the <code>stac_generator</code> module and use that to generate a composite configuration.</p> <pre><code>import datetime\nfrom typing import Any\n\nfrom stac_generator.core.base.generator import StacSerialiser\nfrom stac_generator.core.base.schema import ColumnInfo, StacCollectionConfig\nfrom stac_generator.core.point.schema import PointConfig\nfrom stac_generator.factory import StacGeneratorFactory\n\n# Defining a config from a json file\n\nvector_config: str = \"vector_simple_config.json\"\n\n# Defining a config as a dictionary\n\nraster_config: dict[str, Any] = {\n    \"id\": \"vegetation_cover\",\n    \"location\": \"vegetation_cover.tif\",\n    \"collection_date\": \"2021-02-21\",\n    \"collection_time\": \"10:00:17\",\n    \"band_info\": [{\"name\": \"vegetation\", \"description\": \"Vegetation cover level\"}],\n}\n\n# Defining a config as a Config object\npoint_config = PointConfig(\n    id=\"soil_data\",\n    location=\"soil_data.csv\",\n    collection_date=datetime.date(2020, 1, 1),\n    collection_time=datetime.time(10),\n    X=\"Longitude\",\n    Y=\"Latitude\",\n    epsg=4326,\n    column_info=[ColumnInfo(name=\"Cal_Soln\", description=\"Calcium Soln in ppm\")],\n)\n\n# Create a Collection Generator\ncollection_generator = StacGeneratorFactory.get_collection_generator(\n    source_configs=[point_config, vector_config, raster_config],\n    collection_config=StacCollectionConfig(id=\"collection\"),\n)\n# Serialise data\nserialiser = StacSerialiser(collection_generator, \"generated\")\nserialiser()\n</code></pre>"},{"location":"point/","title":"Point","text":"<p>The <code>stac_generator</code> uses the <code>csv</code> and <code>txt</code> extensions to describe point data. In addition to the minimum required fields, the STAC generator requires a few additional parameters to properly parse the asset.</p> <p>Given the flexibility of the csv format, we require point dataset to be structured in a particular way. Each row of the csv file describes a point, with columns being the attributes. At the minimum, there must be two columns describing the coordinates of the points, with the common options being <code>lat/lon</code>, <code>y/x</code>, <code>northings/eastings</code>, etc. The required config fields include:</p> <ul> <li><code>X</code>: the column in the csv asset to describe the longitude.</li> <li><code>Y</code>: the column in the csv asset to describe the latitude.</li> <li><code>epsg</code>: the crs of the <code>X</code>, <code>Y</code> columns.</li> </ul> <p>There can also be optional columns:</p> <ul> <li><code>T</code>: the column in the csv asset that describes the date of collection of a point record.</li> <li><code>date_format</code>: how the date string is interpreted - by default, dates are assumed to be <code>ISO8640</code> compliant.</li> <li><code>Z</code>: the column in the csv asset that describes the altitude.</li> <li><code>column_info</code>: describe the relevant names and descriptions of relavant attributes.</li> </ul>"},{"location":"point/#generic-point-data","title":"Generic Point Data","text":"<p>In this tutorial, we will describe the asset <code>soil_data.csv</code> contained in the zip folder.</p> Longitude Latitude mid_depth Ca_Soln 150.547 -24.3399 0.05 85.25 150.547 -24.3399 0.2 361.1 150.547 -24.3399 0.4 295.8 150.551 -24.3403 0.05 230.2 150.551 -24.3403 0.2 222.85 150.551 -24.3403 0.4 157.5 150.555 -24.3409 0.05 42.58 150.555 -24.3409 0.2 34.97 150.555 -24.3409 0.4 47.815 150.551 -24.3395 0.05 222.35 150.551 -24.3395 0.2 214.85 150.551 -24.3395 0.4 158.15 150.549 -24.3383 0.05 78.4 150.549 -24.3383 0.2 196.05 150.549 -24.3383 0.4 249.25 150.552 -24.3388 0.05 191.15 150.552 -24.3388 0.2 203.4 150.552 -24.3388 0.4 156.75 150.554 -24.339 0.05 53.05 150.554 -24.339 0.2 36.675 150.554 -24.339 0.4 62.1 150.553 -24.3376 0.05 88.55 150.553 -24.3376 0.2 69.65 150.553 -24.3376 0.4 29.245 150.556 -24.338 0.05 43.945 150.556 -24.338 0.2 29.185 150.556 -24.338 0.4 33.32 150.552 -24.3367 0.05 58.85 150.552 -24.3367 0.2 57.85 150.552 -24.3367 0.4 30.12 150.554 -24.3364 0.05 171.7 150.554 -24.3364 0.2 60.05 150.554 -24.3364 0.4 45.795 150.556 -24.336 0.05 83.55 150.556 -24.336 0.2 37.535 150.556 -24.336 0.4 43.605"},{"location":"point/#config","title":"Config","text":"<p>The config - <code>point_simple_config.json</code> is described below:</p> jsonyaml point_simple_config.json<pre><code>[\n  {\n    \"id\": \"soil_data\",\n    \"location\": \"soil.csv\",\n    \"collection_date\": \"2020-01-01\",\n    \"collection_time\": \"10:00:00\",\n    \"X\": \"Longitude\",\n    \"Y\": \"Latitude\",\n    \"epsg\": 4326,\n    \"column_info\": [\n      {\n        \"name\": \"Ca_Soln\",\n        \"description\": \"Calcium solution in ppm\"\n      },\n    ]\n  }\n]\n</code></pre> point_simple_config.yaml<pre><code>- id: soil_data\n  location: soil_data.csv\n  epsg: 4326\n  X: Longitude\n  Y: Latitude\n  collection_date: '2020-01-01'\n  collection_time: '10:00:00'\n  column_info:\n  - description: Calcium solution in ppm\n    name: Ca_Soln\n</code></pre>"},{"location":"point/#field-explanations","title":"Field Explanations","text":"<ul> <li><code>X</code>: the x coordinate of the data is <code>Longitude</code>.</li> <li><code>Y</code>: the y coordinate of the data is <code>Latitude</code>.</li> <li><code>epsg</code>: we assume the data is recorded in WGS84 or epsg 4326.</li> <li><code>column_info</code>: similar to the same field in vector assets. This is a list of column objects with fields <code>name</code> and <code>description</code>. In this example, we describe the attribute <code>ca_soln</code>.</li> </ul>"},{"location":"point/#command-and-output","title":"Command and Output","text":"<p>Save the config file as <code>point_simple_config.json</code> and run the follow serialisation command:</p> <pre><code>stac_generator serialise point_simple_config.json\n</code></pre>"},{"location":"point/#timeseries-point-data","title":"Timeseries Point Data","text":"<p>In this tutorial, we describe the asset <code>adelaide_airport.csv</code> which contains weather station collected by a BOM station in the area:</p> latitude longitude elevation station YYYY-MM-DD daily_rain max_temp min_temp radiation mslp -34.9524 138.52 2 23034 2023-01-01 0 32.2 17 31.8 1007.4 -34.9524 138.52 2 23034 2023-01-02 0 26.9 16.8 31.7 1007.5 -34.9524 138.52 2 23034 2023-01-03 0 24.1 16.5 29 1012.9 -34.9524 138.52 2 23034 2023-01-04 0 22.9 14.9 25.3 1014.9 -34.9524 138.52 2 23034 2023-01-05 0 24.8 14 31.6 1016.8 -34.9524 138.52 2 23034 2023-01-06 0 28.8 15.9 31.7 1014.1 -34.9524 138.52 2 23034 2023-01-07 0 35.1 18.3 31.5 1008.8 -34.9524 138.52 2 23034 2023-01-08 0 36.1 20.2 31.4 1008.2 -34.9524 138.52 2 23034 2023-01-09 0 31.1 17.5 31.1 1013.9 -34.9524 138.52 2 23034 2023-01-10 0 29.5 15.9 31.2 1014.8 -34.9524 138.52 2 23034 2023-01-11 0 27.1 15.9 31 1011.3 -34.9524 138.52 2 23034 2023-01-12 0 33.1 15.8 31.1 1013.8 -34.9524 138.52 2 23034 2023-01-13 0 34.7 17.1 31 1015.2 -34.9524 138.52 2 23034 2023-01-14 0 40.4 25.7 26.1 1009.3 -34.9524 138.52 2 23034 2023-01-15 0 25.3 16.3 25 1019.7 -34.9524 138.52 2 23034 2023-01-16 0 34.3 17.4 29.9 1016.8 -34.9524 138.52 2 23034 2023-01-17 0 38.1 22.1 14 1009.5 -34.9524 138.52 2 23034 2023-01-18 2.6 21.6 18.5 13.6 1015.4 -34.9524 138.52 2 23034 2023-01-19 0 22.8 14.8 29.2 1020.4 -34.9524 138.52 2 23034 2023-01-20 0 25.1 13.5 26.5 1017.7 -34.9524 138.52 2 23034 2023-01-21 0 27.7 15.4 30.4 1015.3 -34.9524 138.52 2 23034 2023-01-22 0 30.1 15.7 30.1 1016.3 -34.9524 138.52 2 23034 2023-01-23 0 29.9 16.1 22.8 1013.1 -34.9524 138.52 2 23034 2023-01-24 0 29.5 17 30 1011.9 -34.9524 138.52 2 23034 2023-01-25 0.2 24.4 14.4 30 1011.9 -34.9524 138.52 2 23034 2023-01-26 0 27.8 14.7 29.3 1018 -34.9524 138.52 2 23034 2023-01-27 0 37.8 13.4 29.4 1012.9 -34.9524 138.52 2 23034 2023-01-28 0 27.6 24.1 8.2 1008.2 -34.9524 138.52 2 23034 2023-01-29 14.2 23.5 19.2 10.5 1012.2 -34.9524 138.52 2 23034 2023-01-30 0 25.2 16 29 1014.9 -34.9524 138.52 2 23034 2023-01-31 0 23.5 13.8 29.4 1011.3 -34.9524 138.52 2 23034 2023-02-01 0 22.1 12.7 14.5 1010.4"},{"location":"point/#config_1","title":"Config","text":"<p>We prepare the <code>point_time_series_config.json</code> as follows:</p> jsonyaml point_time_series_config.json<pre><code>[\n  {\n    \"id\": \"adelaide_airport\",\n    \"location\": \"tests/files/integration_tests/point/data/adelaide_airport.csv\",\n    \"collection_date\": \"2023-01-01\",\n    \"collection_time\": \"09:00:00\",\n    \"X\": \"longitude\",\n    \"Y\": \"latitude\",\n    \"Z\": \"elevation\",\n    \"T\": \"YYYY-MM-DD\",\n    \"epsg\": 7843,\n    \"column_info\": [\n      {\n        \"name\": \"daily_rain\",\n        \"description\": \"Observed daily rain fall in mm\"\n      },\n      {\n        \"name\": \"max_temp\",\n        \"description\": \"Observed daily maximum temperature in degree C\"\n      },\n      {\n        \"name\": \"min_temp\",\n        \"description\": \"Observed daily minimum temperature in degree C\"\n      },\n      {\n        \"name\": \"radiation\",\n        \"description\": \"Total incoming downward shortwave radiation on a horizontal surface MJ/sqm\"\n      },\n      {\n        \"name\": \"mslp\",\n        \"description\": \"Mean sea level pressure in hPa\"\n      }\n    ]\n  }\n]\n</code></pre> point_time_series_config.yaml<pre><code>- id: adelaide_airport\n  location: adelaide_airport.csv\n  collection_date: '2023-01-01'\n  collection_time: 09:00:00\n  X: longitude\n  Y: latitude\n  Z: elevation\n  T: YYYY-MM-DD\n  epsg: 7843\n  column_info:\n  - description: Observed daily rain fall in mm\n    name: daily_rain\n  - description: Observed daily maximum temperature in degree C\n    name: max_temp\n  - description: Observed daily minimum temperature in degree C\n    name: min_temp\n  - description: Total incoming downward shortwave radiation on a horizontal surface\n      MJ/sqm\n    name: radiation\n  - description: Mean sea level pressure in hPa\n    name: mslp\n</code></pre>"},{"location":"point/#field-explanation","title":"Field Explanation","text":"<ul> <li><code>T</code>: describe the name of the time column - i.e. <code>YYYY-MM-DD</code>.</li> </ul> <p>In summary, the values for <code>X</code>, <code>Y</code>, <code>Z</code>, <code>T</code> are obtained from the raw csv - i.e. longitude, latitude, elevation and YYYY-MM-DD respectively.</p> <p><code>epsg</code> value cannot be derived from the csv and must be known by the user - i.e. reading dataset metadata on BOM/SILO website.</p>"},{"location":"point/#command-and-output_1","title":"Command and Output","text":"<p>Save the config as <code>point_time_series_config.json</code>. Run the following command to serialise the metadata:</p> <pre><code>stac_generator serialise point_time_series_config.json\n</code></pre>"},{"location":"raster/","title":"Raster","text":"<p>For raster assets (<code>tif</code>, <code>geotif</code>, <code>tiff</code>, <code>geotiff</code> extensions), in addition to the required fields, users are required to declare recorded bands under <code>band_info</code> field.</p>"},{"location":"raster/#common-bands","title":"Common bands","text":"<p>In this tutorial, we will describe the asset <code>L2A_PVI.tif</code> from the zip folder. The asset is an RGB image with RGB bands.</p> <p></p>"},{"location":"raster/#config","title":"Config","text":"<p>We will prepare the following <code>raster_simple_config.json</code>:</p> jsonyaml raster_simple_config.json<pre><code>[\n  {\n    \"id\": \"L2A_PVI\",\n    \"location\": \"L2A_PVI.tif\",\n    \"collection_date\": \"2021-02-21\",\n    \"collection_time\": \"10:00:17\",\n    \"band_info\": [\n      {\n        \"name\": \"R\",\n        \"common_name\": \"red\",\n        \"description\": \"Common name: red, Range: 0.6 to 0.7\",\n        \"wavelength\": 0.6645\n      },\n      {\n        \"name\": \"G\",\n        \"common_name\": \"green\",\n        \"description\": \"Common name: green, Range: 0.5 to 0.6\",\n        \"wavelength\": 0.56\n      },\n      {\n        \"name\": \"B\",\n        \"common_name\": \"blue\",\n        \"description\": \"Common name: blue, Range: 0.45 to 0.5\",\n        \"wavelength\": 0.4966\n      }\n    ]\n  }\n]\n</code></pre> raster_simple_config.yaml<pre><code>- id: L2A_PVI\n  location: L2A_PVI.tif\n  collection_date: '2021-02-21'\n  collection_time: '10:00:17'\n  band_info:\n  - common_name: red\n    description: 'Common name: red, Range: 0.6 to 0.7'\n    name: R\n    wavelength: 0.6645\n  - common_name: green\n    description: 'Common name: green, Range: 0.5 to 0.6'\n    name: G\n    wavelength: 0.56\n  - common_name: blue\n    description: 'Common name: blue, Range: 0.45 to 0.5'\n    name: B\n    wavelength: 0.4966\n</code></pre>"},{"location":"raster/#field-explanation","title":"Field explanation:","text":"<p><code>band_info</code> is a list of band objects represented in the raster:</p> <ul> <li><code>name</code>: band's name</li> <li><code>common_name</code>: band's name that are more well-known.</li> <li><code>wavelength</code>: band's wavelength</li> <li><code>description</code>: band's description</li> </ul> <p>Aside from <code>name</code>, other fields are optional. Note that <code>common_name</code> supports a very small subset of well-known names. If users provide a <code>common_name</code> value that is not on this list, the program will raise an error.</p>"},{"location":"raster/#command-and-output","title":"Command and Output","text":"<p>Save the config as <code>raster_simple_config.json</code> and run the following command:</p> <pre><code>stac_generator serialise raster_simple_config.json\n</code></pre>"},{"location":"raster/#uncommonunknown-bands","title":"Uncommon/unknown bands","text":"<p>In this tutorial, we will use the asset <code>vegetation_cover.tif</code> asset, which contains a custom band <code>vegetation_cover</code>.</p> <p></p>"},{"location":"raster/#config_1","title":"Config","text":"<p>We will prepare the following <code>raster_custom_config.json</code>:</p> jsonyaml raster_custom_config.json<pre><code>[\n  {\n    \"id\": \"vegetation_cover\",\n    \"location\": \"vegetation_cover.tif\",\n    \"collection_date\": \"2021-02-21\",\n    \"collection_time\": \"10:00:17\",\n    \"band_info\": [\n      {\n        \"name\": \"vegetation\",\n        \"description\": \"Vegetation cover level\"\n      }\n    ]\n  }\n]\n</code></pre> raster_custom_config.yaml<pre><code>- id: vegetation_cover\n  location: vegetation_cover.tif\n  collection_date: '2021-02-21'\n  collection_time: '10:00:17'\n  band_info:\n  - description: Vegetation cover level\n    name: vegetation\n</code></pre> <p>Note that we only provide name and description since other information is unknown.</p>"},{"location":"raster/#command-and-output_1","title":"Command and Output","text":"<p>To serialise the metadata. Save the config as <code>raster_custom_config.json</code> and run the serialisation command:</p> <pre><code>stac_generator serialise raster_custom_config.json\n</code></pre>"},{"location":"schema/","title":"Schema","text":""},{"location":"schema/#core.base.schema.StacCollectionConfig","title":"<code>StacCollectionConfig</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Contains parameters to pass to Collection constructor. Also contains other metadata except for datetime related metadata.</p> <p>Collection's datetime, start_datetime and end_datetime will be derived from the time information of its children items</p> <p>This config provides additional information that can not be derived from source file, which includes Stac Common Metadata and other descriptive information such as the id of the new entity</p>"},{"location":"schema/#core.base.schema.StacCollectionConfig.id","title":"<code>id</code>  <code>instance-attribute</code>","text":"<p>Item id</p>"},{"location":"schema/#core.base.schema.StacCollectionConfig.title","title":"<code>title = 'Auto-generated Stac Item'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>A human readable title describing the item entity. https://github.com/radiantearth/stac-spec/blob/master/commons/common-metadata.md#basics</p>"},{"location":"schema/#core.base.schema.StacCollectionConfig.description","title":"<code>description = 'Auto-generated Stac Item'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Detailed multi-line description to fully explain the STAC entity. https://github.com/radiantearth/stac-spec/blob/master/commons/common-metadata.md#basics</p>"},{"location":"schema/#core.base.schema.StacCollectionConfig.license","title":"<code>license = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>License(s) of the data as SPDX License identifier, SPDX License expression, or other - https://github.com/radiantearth/stac-spec/blob/master/commons/common-metadata.md#licensing</p>"},{"location":"schema/#core.base.schema.StacCollectionConfig.providers","title":"<code>providers = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>A list of providers, which may include all organizations capturing or processing the data or the hosting provider. Providers should be listed in chronological order with the most recent provider being the last element of the list. - https://github.com/radiantearth/stac-spec/blob/master/commons/common-metadata.md#provider</p>"},{"location":"schema/#core.base.schema.StacCollectionConfig.platform","title":"<code>platform = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Unique name of the specific platform to which the instrument is attached. https://github.com/radiantearth/stac-spec/blob/master/commons/common-metadata.md#platform</p>"},{"location":"schema/#core.base.schema.StacCollectionConfig.instruments","title":"<code>instruments = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Name of instrument or sensor used (e.g., MODIS, ASTER, OLI, Canon F-1). https://github.com/radiantearth/stac-spec/blob/master/commons/common-metadata.md#instrument</p>"},{"location":"schema/#core.base.schema.StacCollectionConfig.constellation","title":"<code>constellation = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Name of the constellation to which the platform belongs. https://github.com/radiantearth/stac-spec/blob/master/commons/common-metadata.md#constellation</p>"},{"location":"schema/#core.base.schema.StacCollectionConfig.mission","title":"<code>mission = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Name of the mission for which data is collected. https://github.com/radiantearth/stac-spec/blob/master/commons/common-metadata.md#mission</p>"},{"location":"schema/#core.base.schema.StacItemConfig","title":"<code>StacItemConfig</code>","text":"<p>               Bases: <code>StacCollectionConfig</code></p> <p>Contains parameters to pass to Item constructor. Also contains other metadata except for datetime related metadata.</p> <p>Item's datetime will be superseded by <code>collection_date</code> and <code>collection_time</code> recorded in local timezone. The STAC <code>datetime</code> metadata is obtained from the method <code>get_datetime</code> by providing the local timezone, which will be automatically derived from the crs information.</p> <p>This config provides additional information that can not be derived from source file, which includes Stac Common Metadata and other descriptive information such as the id of the new entity</p>"},{"location":"schema/#core.base.schema.StacItemConfig.collection_date","title":"<code>collection_date</code>  <code>instance-attribute</code>","text":"<p>Date when the data is collected</p>"},{"location":"schema/#core.base.schema.StacItemConfig.collection_time","title":"<code>collection_time</code>  <code>instance-attribute</code>","text":"<p>Time when the data is collected</p>"},{"location":"schema/#core.base.schema.StacItemConfig.timezone","title":"<code>timezone = 'local'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Timezone</p>"},{"location":"schema/#core.base.schema.SourceConfig","title":"<code>SourceConfig</code>","text":"<p>               Bases: <code>StacItemConfig</code></p> <p>Base source config that should be subclassed for different file extensions.</p> <p>Source files contain raw spatial information (i.e. geotiff, shp, csv) from which some Stac metadata can be derived. SourceConfig describes:</p> <ul> <li>The access mechanisms for the source file: stored on local disk, or hosted somewhere behind an api endpoint. If the source file must be accessed through an endpoint, users can provide additional HTTP information that forms the HTTP request to the host server.</li> <li>Processing information that are unique for the source type. Users should inherit <code>SourceConfig</code> for file extensions currently unsupported.</li> <li>Additional Stac Metadata from <code>StacConfig</code></li> </ul>"},{"location":"schema/#core.base.schema.SourceConfig.location","title":"<code>location</code>  <code>instance-attribute</code>","text":"<p>Asset's href</p>"},{"location":"schema/#core.base.schema.SourceConfig.extension","title":"<code>extension = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Explicit file extension specification. If the file is stored behind an api endpoint, the field <code>extension</code> must be provided</p>"},{"location":"schema/#core.base.schema.SourceConfig.method","title":"<code>method = 'GET'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>HTTPMethod to acquire the file from <code>location</code></p>"},{"location":"schema/#core.base.schema.SourceConfig.params","title":"<code>params = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>HTTP query params for getting file from <code>location</code></p>"},{"location":"schema/#core.base.schema.SourceConfig.headers","title":"<code>headers = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>HTTP query headers for getting file from <code>location</code></p>"},{"location":"schema/#core.base.schema.SourceConfig.cookies","title":"<code>cookies = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>HTTP query cookies for getting file from <code>location</code></p>"},{"location":"schema/#core.base.schema.SourceConfig.content","title":"<code>content = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>HTTP query body content for getting file from <code>location</code></p>"},{"location":"schema/#core.base.schema.SourceConfig.data","title":"<code>data = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>HTTP query body content for getting file from <code>location</code></p>"},{"location":"schema/#core.base.schema.SourceConfig.json_body","title":"<code>json_body = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>HTTP query body content for getting file from <code>location</code></p>"},{"location":"schema/#core.base.schema.ColumnInfo","title":"<code>ColumnInfo</code>","text":"<p>               Bases: <code>TypedDict</code></p> <p>TypedDict description of GeoDataFrame columns. Used for describing vector/point attributes</p>"},{"location":"schema/#core.base.schema.ColumnInfo.name","title":"<code>name</code>  <code>instance-attribute</code>","text":"<p>Column name</p>"},{"location":"schema/#core.base.schema.ColumnInfo.description","title":"<code>description</code>  <code>instance-attribute</code>","text":"<p>Column description</p>"},{"location":"schema/#core.base.schema.ColumnInfo.dtype","title":"<code>dtype</code>  <code>instance-attribute</code>","text":"<p>Column data type</p>"},{"location":"schema/#core.base.schema.HasColumnInfo","title":"<code>HasColumnInfo</code>","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"schema/#core.base.schema.HasColumnInfo.column_info","title":"<code>column_info = Field(default_factory=list)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>List of attributes associated with point/vector data</p>"},{"location":"setup/","title":"Setup","text":""},{"location":"setup/#setup","title":"Setup","text":"<p>This tutorial demonstrates how to use the STAC generator command-line interface to describe spatio-temporal assets. It covers various scenarios and data types.</p>"},{"location":"setup/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Download Assets</p> <p>Download the zip file containing the raw assets for this tutorial here. Extract it into a folder named <code>Example</code>.</p> </li> <li> <p>Install STAC Generator</p> <p>Install the stac_generator package either globally or within a virtual environment.</p> </li> <li> <p>Open Terminal in <code>Example</code></p> <ul> <li>Windows: right click and select the option <code>Open in Terminal</code>.</li> <li>Mac: right click and select the option <code>New Terminal at Folder</code>.</li> <li>Linux: right click and select <code>Open in Terminal</code>.</li> </ul> </li> </ol>"},{"location":"setup/#verifying-installation","title":"Verifying Installation","text":"<p>Run the following command in the terminal to ensure the stac_generator is installed correctly:</p> <p><pre><code>stac_generator --version\n</code></pre> Expected output:</p> <p></p>"},{"location":"setup/#generating-stac-records","title":"Generating STAC Records","text":"<p>To create a STAC-compliant record, you need to provide additional metadata using configuration files. Configurations define STAC items in a collection. At a minimum, a config file should include:</p> <ul> <li><code>location</code>: path to the asset</li> <li><code>id</code>: Unique identifier</li> <li><code>collection_date</code>: date of asset collection</li> <li><code>collection_time</code>: time of asset collection</li> </ul> <p>Note that config fields can be entered in any order.</p> <p>Supported config formats:</p> <ul> <li>Preferred: json, yaml</li> <li>Limited use: csv</li> </ul> <p>Example configurations are included in the config folder of the extracted zip file.</p> <p>Note: The tutorial configs differ slightly from these due to their use of cloud-based asset URLs.</p>"},{"location":"stac_generator_architecture/","title":"STAC Generator Architecture","text":""},{"location":"stac_generator_architecture/#workflow","title":"Workflow","text":"<ol> <li> <p>I/O</p> <p>Users provides as input various configuration formats. Configurations can be paths to json/yaml config files, python dictionaries or subclasses of <code>SourceConfig</code>.</p> </li> <li> <p>Classification/Validation</p> <p>The configs are passed to <code>StacGeneratorFactory</code> which matches raw configurations to the appropriate configuration subclass - <code>RasterConfig</code>, <code>VectorConfig</code> and <code>PointConfig</code>. The matching process is performed using the config's <code>location</code> extension. The promotion step also involves data validation, which checks whether the required fields are provided.</p> </li> <li> <p>Conversion to ItemGenerator</p> <p>The <code>SourceConfig</code> instances are then promoted to an appropriate <code>ItemGenerator</code> instance (<code>RasterGenerator</code>, <code>VectorGenerator</code>, and <code>PointGenerator</code>).</p> </li> <li> <p>Instantiate CollectionGenerator</p> <p>Together with the list of <code>ItemGenerator</code> subjects, a set of collection's fields and keywords is used to instantiate the <code>CollectionGenerator</code> object.</p> </li> <li> <p>Serialisation</p> <p>Using the <code>CollectionGenerator</code> object, the STAC generator uses the <code>StacSerialiser</code> class for writing the metadata locally or to a remote API.</p> </li> </ol>"},{"location":"stac_generator_architecture/#faq","title":"FAQ","text":""},{"location":"stac_generator_architecture/#handling-of-collections-spatial-extent-attributes","title":"Handling of Collection's spatial extent attributes","text":"<p>The spatial extent is determined as enclosing bounding box of all items' bounding boxes. This bounding box is in WGS 84.</p>"},{"location":"stac_generator_architecture/#handling-of-collections-temporal-extent-attributes","title":"Handling of Collection's temporal extent attributes","text":"<p>The temporal extent is determined as the minimum <code>start_datetime</code> and the maximum <code>end_datetime</code> in UTC.</p>"},{"location":"stac_generator_architecture/#handling-of-items-geometry-attributes","title":"Handling of Item's geometry attributes","text":"<p>The item's geometry is read from the asset. If the asset's geometry is not in WGS 84 (EPSG 4326), the values are converted to WGS 84 before serialisation.</p>"},{"location":"stac_generator_architecture/#handling-of-items-bbox-attributes","title":"Handling of Item's bbox attributes","text":"<p>An item's bounding box (top, left, bottom, right) is determined from the smallest bounding box that encloses the item's geometry. The values are converted to WGS 84 before serialisation.</p>"},{"location":"stac_generator_architecture/#handling-of-items-datetime-attributes","title":"Handling of Item's datetime attributes","text":"<p>The item's datetime value is determined from the config's fields <code>collection_date</code>, <code>collection_time</code>, and <code>timezone</code>. If <code>timezone</code> is not provided or <code>timezone</code> is <code>local</code>, the data's timezone is inferred using the asset's geometry. The <code>collection_date</code> and <code>collection_time</code> are then combined and converted from the <code>timezone</code> value to <code>utc</code>.</p>"},{"location":"stac_generator_architecture/#handling-of-items-start_datetime-and-end_datetime-attributes","title":"Handling of Item's start_datetime and end_datetime attributes","text":"<p>For asset that are time-series based (either a point asset with a <code>T</code> attribute or a joined vector asset with a <code>date_column</code> in <code>join_config</code>), the date values are extracted from the asset. Any timestamp that are not timezone-awared will be assigned a timezone value based on the <code>timezone</code> config field as described previously. All timestamps are then converted to UTC. <code>start_datetime</code> and <code>end_datetime</code> are the minimum and maximum values of the UTC timestamps.</p> <p>For assets that do not contain timeseries, <code>start_datetime</code> and <code>end_datetime</code> are assigned the value of <code>datetime</code>.</p>"},{"location":"stac_generator_architecture/#handling-of-items-assets-attributes","title":"Handling of Item's assets attributes","text":"<p>Unlike a generic STAC item that can contain multiple assets, a STAC Generator generated Item contains only a single asset which has the key <code>data</code>. The asset's role is also <code>data</code>.</p>"},{"location":"stac_generator_architecture/#handling-of-items-property-attributes","title":"Handling of Item's property attributes","text":"<p>Each STAC Generator generated STAC Item contains an object under the key <code>stac_generator</code> in <code>properties</code>. The object is required for subsequent asset parsing in the <code>mccn-engine</code>.</p>"},{"location":"stac_metadata/","title":"STAC Metadata","text":"<p>STAC (SpatioTemporal Asset Catalog) metadata refers to a standardized way of describing geospatial data, such as satellite imagery, through metadata that is human-readable and machine-readable. It follows the STAC specification, which provides a structured format for organizing and searching for spatio-temporal data.</p>"},{"location":"stac_metadata/#core-components","title":"Core Components","text":"<ul> <li> <p><code>Item</code>: Represents a single spatiotemporal asset (e.g., a satellite image). It includes:</p> <ul> <li> <p><code>id</code>: item's id</p> </li> <li> <p><code>bbox</code>: item's bounding box.</p> </li> <li> <p><code>geometry</code>: spatial extent (e.g., a GeoJSON polygon).</p> </li> <li> <p><code>datetime</code>: specifies the temporal information (start/end dates for Collections).</p> </li> <li> <p><code>assets</code>: individual data files (e.g., GeoTIFFs) with additional metadata such as roles (e.g., thumbnail, data).</p> </li> </ul> </li> <li> <p><code>Collection</code>: a group of related Items with shared metadata, such as satellite images from the same mission.</p> </li> </ul>"},{"location":"stac_metadata/#extensions","title":"Extensions","text":"<p>STAC is extensible, allowing additional fields to describe specific domains or use cases. Common extensions include:</p> <ul> <li>Raster Extension: describes additional raster metadata such as sampling, scale, offset etc.</li> <li>Electro-Optical Extension: for satellite images, describing bands, cloud cover, etc.</li> <li>Projection Extension: provides a way to describe the primary asset's coordinates referencing system (CRS).</li> </ul> <p>STAC metadata is typically stored in JSON format and is widely used in platforms and services dealing with geospatial data to improve accessibility and usability.</p>"},{"location":"stac_metadata/#example-stac-metadata","title":"Example STAC Metadata","text":"ItemCollection <pre><code>{\n  \"type\": \"Feature\",\n  \"stac_version\": \"1.1.0\",\n  \"stac_extensions\": [\n    \"https://stac-extensions.github.io/projection/v2.0.0/schema.json\"\n  ],\n  \"id\": \"adelaide_airport\",\n  \"geometry\": {\n    \"type\": \"Point\",\n    \"coordinates\": [\n      138.5196,\n      -34.9524\n    ]\n  },\n  \"bbox\": [\n    138.5196,\n    -34.9524,\n    138.5196,\n    -34.9524\n  ],\n  \"properties\": {\n    \"timezone\": \"local\",\n    \"stac_generator\": {\n      \"column_info\": [\n        {\n          \"name\": \"daily_rain\",\n          \"description\": \"Observed daily rain fall in mm\"\n        },\n        {\n          \"name\": \"max_temp\",\n          \"description\": \"Observed daily maximum temperature in degree C\"\n        },\n        {\n          \"name\": \"min_temp\",\n          \"description\": \"Observed daily minimum temperature in degree C\"\n        },\n        {\n          \"name\": \"radiation\",\n          \"description\": \"Total incoming downward shortwave radiation on a horizontal surface MJ/sqm\"\n        },\n        {\n          \"name\": \"mslp\",\n          \"description\": \"Mean sea level pressure in hPa\"\n        }\n      ],\n      \"X\": \"longitude\",\n      \"Y\": \"latitude\",\n      \"Z\": \"elevation\",\n      \"T\": \"YYYY-MM-DD\",\n      \"epsg\": 7843\n    },\n    \"start_datetime\": \"2022-12-31T13:30:00Z\",\n    \"end_datetime\": \"2023-01-31T13:30:00Z\",\n    \"proj:code\": \"EPSG:7843\",\n    \"proj:wkt2\": \"GEOGCRS[\\\"GDA2020\\\",DATUM[\\\"Geocentric Datum of Australia 2020\\\",ELLIPSOID[\\\"GRS 1980\\\",6378137,298.257222101,LENGTHUNIT[\\\"metre\\\",1]]],PRIMEM[\\\"Greenwich\\\",0,ANGLEUNIT[\\\"degree\\\",0.0174532925199433]],CS[ellipsoidal,3],AXIS[\\\"geodetic latitude (Lat)\\\",north,ORDER[1],ANGLEUNIT[\\\"degree\\\",0.0174532925199433]],AXIS[\\\"geodetic longitude (Lon)\\\",east,ORDER[2],ANGLEUNIT[\\\"degree\\\",0.0174532925199433]],AXIS[\\\"ellipsoidal height (h)\\\",up,ORDER[3],LENGTHUNIT[\\\"metre\\\",1]],USAGE[SCOPE[\\\"Geodesy, cadastre, engineering survey, topographic mapping.\\\"],AREA[\\\"Australia including Lord Howe Island, Macquarie Island, Ashmore and Cartier Islands, Christmas Island, Cocos (Keeling) Islands, Norfolk Island. All onshore and offshore.\\\"],BBOX[-60.55,93.41,-8.47,173.34]],ID[\\\"EPSG\\\",7843]]\",\n    \"datetime\": \"2022-12-31T22:30:00Z\"\n  },\n  \"links\": [\n    {\n      \"rel\": \"root\",\n      \"href\": \"/home/harry/CodingProject/stac-generator/tests/files/integration_tests/point/generated/collection.json\",\n      \"type\": \"application/json\",\n      \"title\": \"Auto-generated.\"\n    },\n    {\n      \"rel\": \"collection\",\n      \"href\": \"/home/harry/CodingProject/stac-generator/tests/files/integration_tests/point/generated/collection.json\",\n      \"type\": \"application/json\",\n      \"title\": \"Auto-generated.\"\n    },\n    {\n      \"rel\": \"self\",\n      \"href\": \"/home/harry/CodingProject/stac-generator/tests/files/integration_tests/point/generated/adelaide_airport/adelaide_airport.json\",\n      \"type\": \"application/json\"\n    },\n    {\n      \"rel\": \"parent\",\n      \"href\": \"/home/harry/CodingProject/stac-generator/tests/files/integration_tests/point/generated/collection.json\",\n      \"type\": \"application/json\",\n      \"title\": \"Auto-generated.\"\n    }\n  ],\n  \"assets\": {\n    \"data\": {\n      \"href\": \"tests/files/integration_tests/point/data/adelaide_airport.csv\",\n      \"type\": \"text/csv\",\n      \"description\": \"Raw csv data\",\n      \"roles\": [\n        \"data\"\n      ]\n    }\n  },\n  \"collection\": \"collection\"\n}\n</code></pre> <pre><code>{\n  \"type\": \"Collection\",\n  \"id\": \"collection\",\n  \"stac_version\": \"1.1.0\",\n  \"description\": \"Auto-generated\",\n  \"links\": [\n    {\n      \"rel\": \"root\",\n      \"href\": \"/home/harry/CodingProject/stac-generator/tests/files/integration_tests/point/generated/collection.json\",\n      \"type\": \"application/json\",\n      \"title\": \"Auto-generated.\"\n    },\n    {\n      \"rel\": \"item\",\n      \"href\": \"/home/harry/CodingProject/stac-generator/tests/files/integration_tests/point/generated/adelaide_airport/adelaide_airport.json\",\n      \"type\": \"application/geo+json\"\n    },\n    {\n      \"rel\": \"item\",\n      \"href\": \"/home/harry/CodingProject/stac-generator/tests/files/integration_tests/point/generated/adelaide_salisbury_bowling_club/adelaide_salisbury_bowling_club.json\",\n      \"type\": \"application/geo+json\"\n    },\n    {\n      \"rel\": \"item\",\n      \"href\": \"/home/harry/CodingProject/stac-generator/tests/files/integration_tests/point/generated/aston_coop/aston_coop.json\",\n      \"type\": \"application/geo+json\"\n    },\n    {\n      \"rel\": \"item\",\n      \"href\": \"/home/harry/CodingProject/stac-generator/tests/files/integration_tests/point/generated/belair/belair.json\",\n      \"type\": \"application/geo+json\"\n    },\n    {\n      \"rel\": \"item\",\n      \"href\": \"/home/harry/CodingProject/stac-generator/tests/files/integration_tests/point/generated/edinburg_raaf/edinburg_raaf.json\",\n      \"type\": \"application/geo+json\"\n    },\n    {\n      \"rel\": \"item\",\n      \"href\": \"/home/harry/CodingProject/stac-generator/tests/files/integration_tests/point/generated/glen_osmond/glen_osmond.json\",\n      \"type\": \"application/geo+json\"\n    },\n    {\n      \"rel\": \"item\",\n      \"href\": \"/home/harry/CodingProject/stac-generator/tests/files/integration_tests/point/generated/happy_valley_reservoir/happy_valley_reservoir.json\",\n      \"type\": \"application/geo+json\"\n    },\n    {\n      \"rel\": \"item\",\n      \"href\": \"/home/harry/CodingProject/stac-generator/tests/files/integration_tests/point/generated/hope_valley_reservoir/hope_valley_reservoir.json\",\n      \"type\": \"application/geo+json\"\n    },\n    {\n      \"rel\": \"item\",\n      \"href\": \"/home/harry/CodingProject/stac-generator/tests/files/integration_tests/point/generated/north_adelaide/north_adelaide.json\",\n      \"type\": \"application/geo+json\"\n    },\n    {\n      \"rel\": \"item\",\n      \"href\": \"/home/harry/CodingProject/stac-generator/tests/files/integration_tests/point/generated/soil_data/soil_data.json\",\n      \"type\": \"application/geo+json\"\n    },\n    {\n      \"rel\": \"self\",\n      \"href\": \"/home/harry/CodingProject/stac-generator/tests/files/integration_tests/point/generated/collection.json\",\n      \"type\": \"application/json\"\n    }\n  ],\n  \"title\": \"Auto-generated.\",\n  \"extent\": {\n    \"spatial\": {\n      \"bbox\": [\n        [\n          138.5196,\n          -35.0591,\n          150.5560285,\n          -24.33600118\n        ]\n      ]\n    },\n    \"temporal\": {\n      \"interval\": [\n        [\n          \"2022-12-31T22:30:00Z\",\n          \"2023-01-08T22:30:00Z\"\n        ]\n      ]\n    }\n  },\n  \"license\": \"proprietary\"\n}\n</code></pre>"},{"location":"utils/","title":"Utility","text":""},{"location":"utils/#core.base.utils.parse_href","title":"<code>parse_href(base_url, collection_id, item_id=None)</code>","text":"<p>Generate href for collection or item based on id</p>"},{"location":"utils/#core.base.utils.href_is_stac_api_endpoint","title":"<code>href_is_stac_api_endpoint(href)</code>","text":"<p>Check if href points to a resource behind a stac api</p>"},{"location":"utils/#core.base.utils.force_write_to_stac_api","title":"<code>force_write_to_stac_api(url, id, json)</code>","text":"<p>Force write a json object to a stac api endpoint.</p>"},{"location":"utils/#core.base.utils.calculate_timezone","title":"<code>calculate_timezone(geometry)</code>","text":"<p>Calculate timezone from geometry</p>"},{"location":"utils/#core.base.utils.localise_timezone","title":"<code>localise_timezone(data, tzinfo)</code>","text":"<pre><code>localise_timezone(\n    data: Timestamp, tzinfo: str\n) -&gt; Timestamp\n</code></pre><pre><code>localise_timezone(\n    data: TimeSeries, tzinfo: str\n) -&gt; TimeSeries\n</code></pre> <p>Add timezone information to data then converts to UTC</p>"},{"location":"utils/#core.base.utils.read_point_asset","title":"<code>read_point_asset(src_path, X_coord, Y_coord, epsg, Z_coord=None, T_coord=None, date_format='ISO8601', columns=None, timezone='local')</code>","text":"<p>Read in csv from local disk Users must provide at the bare minimum the location of the csv, and the names of the columns to be treated as the X and Y coordinates. By default, will read in all columns in the csv. If columns and groupby columns are provided, will selectively read specified columns together with the coordinate columns (X, Y, T).</p>"},{"location":"vector_attributes/","title":"Vector - Attributes","text":"<p>In the previous tutorial, we created a bare minimum config to describe a vector asset. The generated STAC thus contains only the geometry information. In this example, we will enhance the metadata by adding more descriptive fields such as <code>title</code> and <code>description</code>. Additionally, we will describe attributes contained within the vector file. We still use the same asset <code>Werribee.json</code> in the downloaded zip file.</p> <p>For instance, the shape file <code>Werribee.geojson</code> has an attribute called <code>Suburb_Name</code>:</p> <p></p>"},{"location":"vector_attributes/#config","title":"Config","text":"jsonyaml vector_detailed_config.json<pre><code>[\n  {\n    \"id\": \"Werribee\",\n    \"location\": \"Werribee.geojson\",\n    \"collection_date\": \"2025-01-01\",\n    \"collection_time\": \"00:00:00\",\n    \"title\": \"Werribee Item\",\n    \"description\": \"Suburbs near Werribee Melbourne\",\n    \"column_info\": [\n      {\n        \"name\": \"Suburb_Name\",\n        \"description\": \"suburb name\"\n      }\n    ]\n  }\n]\n</code></pre> vector_detailed_config.yaml<pre><code>- id: \"Werribee\"\n  location: \"Werribee.geojson\"\n  collection_date: \"2025-01-01\"\n  collection_time: \"00:00:00\"\n  title: \"Werribee Item\"\n  description: \"Suburbs near Werribee Melbourne\"\n  column_info:\n    - name: \"Suburb_Name\"\n      description: \"suburb name\"\n</code></pre>"},{"location":"vector_attributes/#field-explanation","title":"Field Explanation","text":"<p>The basic fields are the same as those in the previous section. The additional fields are:</p> <ul> <li><code>title</code>: item's title</li> <li><code>description</code>: item's description</li> <li><code>column_info</code>: contains a list of column objects with attribute <code>name</code> and <code>description</code>. This field is used to represent the attributes contained in the vector file.</li> </ul> <p>STAC Common-metadata like <code>title</code> and <code>description</code> can be included in generated STAC records by adding them in the item config. Users can describe the attributes associated with the vector file through the keyword <code>column_info</code>. Users don't need to describe all attributes, but if one of the column objects provided in <code>column_info</code> is not present, the program will raise an error.</p> <p>To see a list of supported metadata, please refer to the relevant documentation.</p>"},{"location":"vector_attributes/#command-and-output","title":"Command and Output","text":"<p>Save this config as <code>vector_detailed_config.json</code>/<code>vector_detailed_config.yaml</code> in the same folder and run the serialisation command:</p> <pre><code>stac_generator serialise vector_detailed_config.json\n</code></pre> <p>The fields <code>title</code>, <code>description</code>, and <code>column_info</code> should appear correctly under the generated item's <code>properties</code>.</p>"},{"location":"vector_geometry/","title":"Vector - Geometry","text":"<p>This section focuses on describing only the geometry of a shape file (<code>.shp</code>, <code>.geojson</code>, etc). We will use the asset <code>Werribee.geojson</code> included in the downloaded zip file.</p> <p>If you have QGIS installed, you can open the file in QGIS to visualize the data:</p> <p></p>"},{"location":"vector_geometry/#config","title":"Config","text":"<p>To describe the shape file, create a configuration file named <code>vector_simple_config</code> in one of the supported formats: JSON or YAML.</p> jsonyaml vector_simple_config.json<pre><code>[\n  {\n    \"id\": \"Werribee\",\n    \"location\": \"Werribee.geojson\",\n    \"collection_date\": \"2025-01-01\",\n    \"collection_time\": \"00:00:00\"\n  }\n]\n</code></pre> vector_simple_config.yaml<pre><code>- id: \"Werribee\"\n  location: \"Werribee.geojson\"\n  collection_date: \"2025-01-01\"\n  collection_time: \"00:00:00\"\n</code></pre>"},{"location":"vector_geometry/#field-explanation","title":"Field Explanation","text":"<ul> <li><code>id</code>: the unique identifier for the item. Note that items in a collection must have unique identifiers.</li> <li><code>location</code>: the relative path to the asset file.</li> <li><code>collection_date</code>: the date the asset was collected.</li> <li><code>collection_time</code>: the time the asset was collected.</li> </ul> <p>Note that these fields are the minimum required set of fields to describe an asset as outlined previously. If <code>location</code> points to a non-existent file, or if the STAC generator cannot access the file through <code>location</code>, the program will raise an error.</p> <p>Save the file in the current directory as <code>vector_simple_config.json</code> or <code>vector_simple_config.yaml</code>.</p>"},{"location":"vector_geometry/#command-and-output","title":"Command and Output","text":"<p>Now run the stac generator serialise command from the terminal:</p> <pre><code>stac_generator serialise vector_simple_config.json\n</code></pre> <p>After running the command, a new folder named generated will appear in the current directory. Inside the generated folder, you will find:</p> <ul> <li> <p>collection.json: Contains the STAC Collection metadata.</p> </li> <li> <p>Werribee/Werribee.json: Contains the STAC Item metadata for our simple vector.</p> </li> </ul> <p>The <code>collection.json</code> and <code>Werribee.json</code> files represent the metadata for your asset, compliant with the STAC specification.</p>"},{"location":"vector_joined/","title":"Vector - Joined Attributes","text":"<p>In many spatial applications, geometry information is stored separately from attributes, typically in different tables. A join operation is performed at runtime to combine the two datasets. To simplify this workflow, we assume:</p> <ul> <li>Geometry information is extracted and stored in a vector file.</li> <li>Attributes are extracted and stored in a CSV file.</li> </ul> <p>The STAC generator can describe this join operation by including a few additional keywords in the configuration.</p>"},{"location":"vector_joined/#generic-join-asset","title":"Generic Join Asset","text":"<p>For this example, we assume the vector file <code>Werribee.geojson</code> has an accompanied attribute table stored in the file <code>distance.csv</code>.</p> Area Distance Public_Transport Drive Growth Yield Point Cook 27.3 68 50 0.046 0.04 Hoppers Crossing 30.8 67 55 0.0402 0.041 Werribee 31.3 56 50 0.0458 0.042 Werribee South 37.3 80 55 -0.01 0.04 Wyndham Vale 37.5 83 60 0.0458 0.043 Altona Meadows 23.7 61 45 0.0422 0.037 Tarneit 29.7 70 55 0.0455 0.044 <p>The asset contains some attributes associated with different suburbs near Werribee. The values of <code>Area</code> in the join asset have a 1-to-1 correspondence with the values of the attribute <code>Suburb_Name</code> in the vector asset.</p>"},{"location":"vector_joined/#config","title":"Config","text":"jsonyaml vector_join_config.json<pre><code>[\n  {\n    \"id\": \"Werribee\",\n    \"location\": \"Werribee.geojson\",\n    \"collection_date\": \"2025-01-01\",\n    \"collection_time\": \"00:00:00\",\n    \"column_info\": [\n      {\n        \"name\": \"Suburb_Name\",\n        \"description\": \"Suburb_Name\"\n      }\n    ],\n    \"join_config\": {\n      \"file\": \"distance.csv\",\n      \"left_on\": \"Suburb_Name\",\n      \"right_on\": \"Area\",\n      \"column_info\": [\n        {\n          \"name\": \"Area\",\n          \"description\": \"Area name\"\n        },\n        {\n          \"name\": \"Distance\",\n          \"description\": \"Driving Distance to CBD in km\"\n        },\n        {\n          \"name\": \"Public_Transport\",\n          \"description\": \"Time taken to reach CBD by public transport in minutes\"\n        },\n        {\n          \"name\": \"Drive\",\n          \"description\": \"Time taken to reach CBD by driving in minutes\"\n        },\n        {\n          \"name\": \"Growth\",\n          \"description\": \"Average 5 year growth in percentage in 2025\"\n        },\n        {\n          \"name\": \"Yield\",\n          \"description\": \"Average rental yield in 2025\"\n        }\n      ]\n    }\n  }\n]\n</code></pre> vector_join_config.yaml<pre><code>- id: Werribee\n  location: Werribee.geojson\n  collection_date: '2025-01-01'\n  collection_time: 00:00:00\n  column_info:\n  - description: Suburb_Name\n    name: Suburb_Name\n  join_config:\n    file: distance.csv\n    left_on: Suburb_Name\n    right_on: Area\n    column_info:\n      - description: Area\n        name: Area name\n      - description: Driving Distance to CBD in km\n        name: Distance\n      - description: Time taken to reach CBD by public transport in minutes\n        name: Public_Transport\n      - description: Time taken to reach CBD by driving in minutes\n        name: Drive\n      - description: Average 5 year growth in percentage in 2025\n        name: Growth\n      - description: Average rental yield in 2025\n        name: Yield\n</code></pre>"},{"location":"vector_joined/#explanation-of-fields","title":"Explanation of fields","text":"<p>The first part of the config is similar to that of the previous tutorial, in which we describe the minimum required fields and the vector's attributes. We also specify the following additional fields:</p> <ul> <li><code>join_config</code>: contains metadata for the join asset</li> <li><code>file</code>: path to the join asset</li> <li><code>left_on</code>: attribute from the vector that will be used for the join operation.</li> <li><code>right_on</code>: attribute from the join asset that will be used for the join operation.</li> <li><code>column_info</code>: attributes of the join asset.</li> </ul> <p>The join terminologies that we use are consistent with pandas' merge operation's, in which the vector geometry is treated as the left dataframe, while the join asset the right dataframe. The join operation is <code>inner left join</code>, where rows with matching values of <code>left_on</code> and <code>right_on</code> are merged. Note that the field <code>left_on</code> must be described in the vector's <code>column_info</code> while <code>right_on</code> described in the join asset's <code>column_info</code>. If either of those fields are not described appropriately, an error will be raised.</p>"},{"location":"vector_joined/#command-and-output","title":"Command and Output","text":"<p>Save the config as <code>vector_join_config.json</code> and run the following command:</p> <pre><code>stac_generator serialise vector_join_config.json\n</code></pre> <p>You should see the corresponding fields appearing under <code>properties</code> in <code>Werribee.json</code>.</p>"},{"location":"vector_joined/#timeseries-join-asset","title":"Timeseries Join Asset","text":"<p>In this example, we will use the join asset <code>price.csv</code> as attributes for the vector file <code>Werribee.geojson</code>. The asset file is presented as follows:</p> Date Area Sell_Price Rent_Price Sell/Rent 2020-01-01T00:00:00Z Point Cook 630 410 1.53659 2024-01-01T00:00:00Z Point Cook 750 530 1.41509 2025-01-01T00:00:00Z Point Cook 750 560 1.33929 2020-01-01T00:00:00Z Altona Meadow 622 375 1.65867 2024-01-01T00:00:00Z Altona Meadow 727 450 1.61556 2025-01-01T00:00:00Z Altona Meadow 725 500 1.45 2020-01-01T00:00:00Z Tarneit 615 390 1.57692 2024-01-01T00:00:00Z Tarneit 690 460 1.5 2025-01-01T00:00:00Z Tarneit 700 500 1.4 2020-01-01T00:00:00Z Hoppers Crossing 510 350 1.45714 2024-01-01T00:00:00Z Hoppers Crossing 592 420 1.40952 2025-01-01T00:00:00Z Hoppers Crossing 600 450 1.33333 2020-01-01T00:00:00Z Werribee 475 345 1.37681 2024-01-01T00:00:00Z Werribee 562 400 1.405 2025-01-01T00:00:00Z Werribee 580 450 1.28889 2020-01-01T00:00:00Z Werribee South 628 385 1.63117 2024-01-01T00:00:00Z Werribee South 870 430 2.02326 2025-01-01T00:00:00Z Werribee South 595 440 1.35227 2020-01-01T00:00:00Z Wyndham Vale 448 340 1.31765 2024-01-01T00:00:00Z Wyndham Vale 530 410 1.29268 2025-01-01T00:00:00Z Wyndham Vale 532 440 1.20909 <p>The asset contains the sale and rental prices of various surburbs in Werribee over three different time periods 2020, 2024 and 2025. Similarly, the attribute <code>Area</code> of the join asset is used to perform the join operation with the attribute  <code>Suburb_Name</code> of the vector asset.</p>"},{"location":"vector_joined/#config_1","title":"Config","text":"jsonyaml vector_join_date_config.json<pre><code>[\n  {\n    \"id\": \"Werribee\",\n    \"location\": \"Werribee.geojson\",\n    \"collection_date\": \"2025-01-01\",\n    \"collection_time\": \"00:00:00\",\n    \"column_info\": [\n      {\n        \"name\": \"Suburb_Name\",\n        \"description\": \"Suburb_Name\"\n      }\n    ],\n    \"join_config\": {\n      \"file\": \"price.csv\",\n      \"left_on\": \"Suburb_Name\",\n      \"right_on\": \"Area\",\n      \"date_column\": \"Date\",\n      \"column_info\": [\n        {\n          \"name\": \"Area\",\n          \"description\": \"Area Name\"\n        },\n        {\n          \"name\": \"Sell_Price\",\n          \"description\": \"Median Sales Price in 2025\"\n        },\n        {\n          \"name\": \"Rent_Price\",\n          \"description\": \"Median Rental Price in 2025\"\n        },\n        {\n          \"name\": \"Sell/Rent\",\n          \"description\": \"Ratio of Sales Price (in $1000) over Rental Price (in $)\"\n        }\n      ]\n    }\n  }\n]\n</code></pre> vector_join_date_config.yaml<pre><code>- id: Werribee\n  collection_date: '2025-01-01'\n  collection_time: 00:00:00\n  location: Werribee.geojson\n  column_info:\n  - description: Suburb_Name\n    name: Suburb_Name\n  join_config:\n    file: price.csv\n    left_on: Suburb_Name\n    right_on: Area\n    date_column: Date\n    column_info:\n    - description: Area Name\n      name: Area\n    - description: Median Sales Price in 2025\n      name: Sell_Price\n    - description: Median Rental Price in 2025\n      name: Rent_Price\n    - description: Ratio of Sales Price (in $1000) over Rental Price (in $)\n      name: Sell/Rent\n</code></pre>"},{"location":"vector_joined/#field-explanation","title":"Field Explanation","text":"<p>The config uses the same set of fields as the config for generic join asset. The additional keyword is:</p> <ul> <li><code>date_column</code>: describes the attribute in the csv to be used as timestamps. From <code>price.csv</code>, this columns is <code>Date</code>.</li> </ul> <p>By default, date values in <code>date_column</code> will be parsed using ISO8601 date format. If date values are encoded with a custom format, the format can be provided using the field <code>date_format</code>. The date formats follows python's strptime formats. Note that if the date column cannot be found in the asset or date values cannot be parsed (either using ISO8601 or <code>date_format</code> value if provided), the program will raise an error.</p>"},{"location":"vector_joined/#command-and-output_1","title":"Command and Output","text":"<p>Save the config as <code>vector_join_date_config.json</code> and run the following command:</p> <pre><code>stac_generator serialise vector_join_date_config.json\n</code></pre> <p>The output should contain the specified fields.</p>"},{"location":"vector_multilayered/","title":"Vector - Multilayered","text":"<p>It is not uncommon to have a multiple shape files compressed into a single zip for archival. The STAC Generator provides some mechanism for handling zipped vector files without having to uncompress the file. In this tutorial, we will make use of <code>SA2.zip</code>, which contains the shape files for the Werribee and Sunbury suburbs in Victoria.</p> <p></p> <p>Here we have two layers - Sunbury and Werribee, and each layer will be generated as a STAC item with indepdent config entries. If there are multiple layers in a zip file, users can choose which layer to describe.</p>"},{"location":"vector_multilayered/#config","title":"Config","text":"jsonyaml vector_layer_config.json<pre><code>[\n  {\n    \"id\": \"WerribeeSA2\",\n    \"location\": \"SA2.zip\",\n    \"collection_date\": \"2025-01-01\",\n    \"collection_time\": \"00:00:00\",\n    \"layer\": \"Werribee\"\n  },\n  {\n    \"id\": \"SunburySA2\",\n    \"location\": \"SA2.zip\",\n    \"collection_date\": \"2025-01-01\",\n    \"collection_time\": \"00:00:00\",\n    \"layer\": \"Sunbury\"\n  }\n]\n</code></pre> vector_layer_config.yaml<pre><code>- id: WerribeeSA2\n  collection_date: '2025-01-01'\n  collection_time: 00:00:00\n  layer: Werribee\n  location: SA2.zip\n- id: SunburySA2\n  collection_date: '2025-01-01'\n  collection_time: 00:00:00\n  layer: Sunbury\n  location: SA2.zip\n</code></pre>"},{"location":"vector_multilayered/#field-explanations","title":"Field Explanations","text":"<ul> <li><code>layer</code>: the layer name in the zip file.</li> </ul> <p>Note that if layer name is not present in the zip file, the program will raise an error.</p>"},{"location":"vector_multilayered/#command-and-output","title":"Command and Output","text":"<p>Save the new config as <code>vector_layer_config.json</code> and run the command:</p> <pre><code>stac_generator serialise vector_layer_config.json\n</code></pre> <p>You will see two items generated, <code>WerribeSA2</code> and <code>SunburySA2</code>. Note that each config record has a <code>layer</code> keyword to identify the layer in the compressed zip. We use a simple config to describe each layer, but it is possible to add additional information like column info and join attributes as described in the previous sections.</p>"},{"location":"extensions/point/generator/","title":"Generator","text":""},{"location":"extensions/point/generator/#core.point.generator.PointGenerator","title":"<code>PointGenerator</code>","text":"<p>               Bases: <code>VectorGenerator[PointConfig]</code></p> <p>ItemGenerator class that handles point data in csv format</p>"},{"location":"extensions/point/generator/#core.point.generator.PointGenerator.generate","title":"<code>generate()</code>","text":"<p>Create item from source csv config</p> <p>Parameters:</p> Name Type Description Default <code>self.config</code> <code>PointConfig</code> <p>config which contains csv metadata</p> required <p>Returns:</p> Type Description <code>pystac.Item</code> <p>stac metadata of the item described in self.config</p>"},{"location":"extensions/point/schema/","title":"Schema","text":""},{"location":"extensions/point/schema/#core.point.schema.PointOwnConfig","title":"<code>PointOwnConfig</code>","text":"<p>               Bases: <code>HasColumnInfo</code></p> <p>Source config for point(csv) data</p>"},{"location":"extensions/point/schema/#core.point.schema.PointOwnConfig.X","title":"<code>X</code>  <code>instance-attribute</code>","text":"<p>Column to be treated as longitude/X coordinate</p>"},{"location":"extensions/point/schema/#core.point.schema.PointOwnConfig.Y","title":"<code>Y</code>  <code>instance-attribute</code>","text":"<p>Column to be treated as latitude/Y coordinate</p>"},{"location":"extensions/point/schema/#core.point.schema.PointOwnConfig.Z","title":"<code>Z = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Column to be treated as altitude/Z coordinate</p>"},{"location":"extensions/point/schema/#core.point.schema.PointOwnConfig.T","title":"<code>T = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Column to be treated as time coordinate</p>"},{"location":"extensions/point/schema/#core.point.schema.PointOwnConfig.date_format","title":"<code>date_format = 'ISO8601'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Format to parse dates - will be used if T column is provided</p>"},{"location":"extensions/point/schema/#core.point.schema.PointOwnConfig.epsg","title":"<code>epsg = 4326</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>EPSG code</p>"},{"location":"extensions/raster/generator/","title":"Generator","text":""},{"location":"extensions/raster/generator/#core.raster.generator.RasterGenerator","title":"<code>RasterGenerator</code>","text":"<p>               Bases: <code>ItemGenerator[RasterConfig]</code></p> <p>Raster Generator</p>"},{"location":"extensions/raster/generator/#core.raster.generator.RasterGenerator.generate","title":"<code>generate()</code>","text":"<p>Generate Raster Item from config</p> <p>Parameters:</p> Name Type Description Default <code>self.config</code> <code>RasterConfig</code> <p>raster config - must contain band info</p> required <p>Returns:</p> Type Description <code>pystac.Item</code> <p>generated item</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>if epsg code is provided in config but does not match that extracted from the asset</p>"},{"location":"extensions/raster/schema/","title":"Schema","text":""},{"location":"extensions/raster/schema/#core.raster.schema.BandInfo","title":"<code>BandInfo</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Band information for raster data</p>"},{"location":"extensions/raster/schema/#core.raster.schema.RasterOwnConfig","title":"<code>RasterOwnConfig</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Configuration for raster data sources</p>"},{"location":"extensions/raster/schema/#core.raster.schema.RasterOwnConfig.band_info","title":"<code>band_info</code>  <code>instance-attribute</code>","text":"<p>List of band information - REQUIRED</p>"},{"location":"extensions/raster/schema/#core.raster.schema.RasterConfig","title":"<code>RasterConfig</code>","text":"<p>               Bases: <code>SourceConfig</code>, <code>RasterOwnConfig</code></p> <p>Configuration for raster data sources</p>"},{"location":"extensions/vector/generator/","title":"Generator","text":""},{"location":"extensions/vector/generator/#core.vector.generator.VectorGenerator","title":"<code>VectorGenerator</code>","text":"<p>               Bases: <code>BaseVectorGenerator[VectorConfig]</code></p> <p>ItemGenerator class that handles vector data with common vector formats - i.e (shp, zipped shp, gpkg, geojson)</p>"},{"location":"extensions/vector/generator/#core.vector.generator.VectorGenerator.generate","title":"<code>generate()</code>","text":"<p>Create item from vector config</p> <p>Parameters:</p> Name Type Description Default <code>self.config</code> <code>VectorConfig</code> <p>config information</p> required <p>Returns:</p> Type Description <code>pystac.Item</code> <p>stac metadata of the file described by self.config</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>if config epsg information is different from epsg information from vector file</p>"},{"location":"extensions/vector/generator/#core.vector.generator.extract_epsg","title":"<code>extract_epsg(crs)</code>","text":"<p>Extract epsg information from crs object. If epsg info can be extracted directly from crs, return that value. Otherwise, try to convert the crs info to WKT2 and extract EPSG using regex</p> <p>Note that this method may yield unreliable result</p> <p>Parameters:</p> Name Type Description Default <code>crs</code> <code>CRS</code> <p>crs object</p> required <p>Returns:</p> Type Description <code>tuple[int, bool] - epsg code and reliability flag</code> <p>epsg information</p>"},{"location":"extensions/vector/schema/","title":"Schema","text":""},{"location":"extensions/vector/schema/#core.vector.schema.VectorOwnConfig","title":"<code>VectorOwnConfig</code>","text":"<p>               Bases: <code>HasColumnInfo</code></p> <p>Extended source config with EPSG code.</p>"},{"location":"extensions/vector/schema/#core.vector.schema.VectorOwnConfig.layer","title":"<code>layer = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Vector layer for multi-layer shapefile</p>"},{"location":"extensions/vector/schema/#core.vector.schema.VectorOwnConfig.join_config","title":"<code>join_config = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Config for join asset if valid</p>"},{"location":"extensions/vector/schema/#core.vector.schema.VectorConfig","title":"<code>VectorConfig</code>","text":"<p>               Bases: <code>SourceConfig</code>, <code>VectorOwnConfig</code></p> <p>Extended source config with EPSG code.</p>"},{"location":"metadata_examples/point/","title":"Point","text":""},{"location":"metadata_examples/point/#ozbarley-point-data","title":"OZBarley Point Data","text":"<p>OZBarley contains 2 point assets - <code>OZBarley1_measurement</code> and <code>OZBarley2_measurement</code>. The point asset can be downloaded from the following link: OZBarley1, OZBarley2. The overall config can be downloaded here. Note that the <code>epsg</code> code is known beforehand.</p>"},{"location":"metadata_examples/point/#llaracampey-point-data","title":"LlaraCampey Point Data","text":"<p>The simplified test case for Llara Campey contains <code>soil_data.csv</code> point data. The config can be downloaded here. The asset itself can be downloaded by visiting the <code>location</code> reference under <code>soil_measurement</code> entry. The link is reproduced here for convenience.</p>"},{"location":"metadata_examples/raster/","title":"Raster","text":""},{"location":"metadata_examples/raster/#ozbarley-raster-data","title":"OZBarley Raster Data","text":"<p>OZBarley contains 6 orthomosaics covering 2 areas over 3 time periods. The dataset also contains 2 DSM tifs. The config can be downloaded here. The actual assets can be downloaded by following the <code>location</code> field in corresponding entry in the config file. Please note how the <code>band_info</code> field is used to describe the raster bands.</p>"},{"location":"metadata_examples/raster/#llaracampey-raster-data","title":"LlaraCampey Raster Data","text":"<p>Llara Campey contains 4 tifs of krigged ECa and Gamma K measurements. The config can be downloaded here. The actual assets can be downloaded by following the <code>location</code> field in the corresponding entry. Please note how the <code>band_info</code> field is used to describe the raster bands.</p>"},{"location":"metadata_examples/vector/","title":"Vector","text":""},{"location":"metadata_examples/vector/#ozbarley-vector-data","title":"OZBarley Vector Data","text":"<p>OZBarley contains 2 vector assets - <code>OZBarley1_layout</code> and <code>OZBarley2_layout</code>. The overall config can be downloaded here. The vector assets can be downloaded by following the <code>location</code> field under <code>OZBarley1_layout</code> and <code>OZBarley2_layout</code> items in the config. The links for OZBarley1 and OZBarley2 are reproduced for convenience.</p>"},{"location":"metadata_examples/vector/#llaracampey-vector-data","title":"LlaraCampey Vector Data","text":"<p>The simplified test case for Llara Campey contains the boundary shapes of different Llara and Campey plots stored as shp file in a compressed zip. To specify a particular boundary, a layer field must be provided. For more information, please refer to the config. Note how C1, C2, ... layout files all reference the same zip, with <code>layer</code> being the differentiator. Also note that while OZBarley vector files have associated attributes that are described with <code>column_info</code>, the vector files for LlaraCampey are simple shape files with no attribute (and thus do not contain <code>column_info</code>).</p>"}]}